digraph AI_Paralegal_Detailed {
    // Graph settings
    rankdir=TB;
    node [shape=box, style="rounded,filled", fontname="Arial", fontsize=10];
    edge [fontname="Arial", fontsize=9];
    compound=true;
    
    // API Layer
    subgraph cluster_api {
        label="API Layer";
        style=filled;
        fillcolor="#f0f8ff";
        
        subgraph cluster_routes {
            label="Routes";
            "auth.py" [label="Authentication\n/api/auth/*"];
            "case_management_routes.py" [label="Case Management\n/api/cases/*"];
            "monitoring_routes.py" [label="Monitoring\n/api/monitoring/*"];
        }
        
        "main.py" [label="FastAPI App\nWebSocket/Chat/Health", fillcolor="#4a90e2"];
    }
    
    // Agent Layer
    subgraph cluster_agents {
        label="Agent Layer";
        style=filled;
        fillcolor="#f5f5dc";
        
        "refactored_agent_sdk.py" [label="Paralegal Agent SDK\n- Legal Research Agent\n- Error Recovery Agent", fillcolor="#daa520"];
    }
    
    // Service Layer
    subgraph cluster_services {
        label="Service Layer";
        style=filled;
        fillcolor="#e6ffe6";
        
        "case_management_service.py" [label="Case Management\n- CRUD operations\n- Deadlines\n- Reminders"];
        "document_generation_service.py" [label="Document Generation\n- Templates\n- Contract Analysis\n- Validation"];
        "statute_search_service.py" [label="Statute Search\n- Hybrid Search\n- Article Lookup"];
        "supreme_court_service.py" [label="Supreme Court\n- Ruling Search\n- Docket Lookup"];
        "openai_client.py" [label="OpenAI Client\n- Structured Output\n- Retry Logic"];
        "fallback_parser.py" [label="Fallback Parser\n- Regex Patterns\n- Entity Extraction"];
    }
    
    // Core Infrastructure
    subgraph cluster_core {
        label="Core Infrastructure";
        style=filled;
        fillcolor="#ffe6e6";
        
        "config_service.py" [label="Config Service\n- Environment Config\n- Sub-configs"];
        "database_manager.py" [label="Database Manager\n- Session Management\n- Transactions"];
        "llm_manager.py" [label="LLM Manager\n- Embeddings\n- Caching"];
        "tool_registry.py" [label="Tool Registry\n- Tool Definitions\n- OpenAI Schemas"];
        "tool_executor.py" [label="Tool Executor\n- Circuit Breaker\n- Retry Logic"];
        "logger_manager.py" [label="Logger Manager\n- Structured Logs\n- Correlation IDs"];
        "conversation_manager.py" [label="Conversation Manager\n- State Management\n- History"];
        "service_interface.py" [label="Service Interface\n- Lifecycle\n- Health Checks"];
    }
    
    // Worker Layer
    subgraph cluster_worker {
        label="Celery Worker Layer";
        style=filled;
        fillcolor="#fff0e6";
        
        subgraph cluster_worker_core {
            label="Worker Core";
            "celery_app.py" [label="Celery App"];
            "service_registry.py" [label="Service Registry\n- Shared Services"];
            "monitoring.py" [label="Monitoring\n- Metrics\n- Signals"];
            "config.py" [label="Celery Config\n- Queues\n- Routing"];
            "base_task.py" [label="Base Task\n- Retry\n- Circuit Breaker"];
        }
        
        subgraph cluster_tasks {
            label="Task Modules";
            "case_tasks.py" [label="Case Tasks"];
            "document_tasks.py" [label="Document Tasks"];
            "search_tasks.py" [label="Search Tasks"];
            "embedding_tasks.py" [label="Embedding Tasks"];
            "statute_tasks.py" [label="Statute Tasks"];
            "ruling_tasks.py" [label="Ruling Tasks"];
            "maintenance.py" [label="Maintenance Tasks"];
        }
    }
    
    // Data Layer
    subgraph cluster_data {
        label="Data Layer";
        style=filled;
        fillcolor="#e6e6fa";
        
        subgraph cluster_models {
            label="Models";
            "models.py" [label="SQLModel\n- Case\n- Document\n- User\n- SNRuling"];
        }
        
        subgraph cluster_storage {
            label="Storage";
            "PostgreSQL" [shape=cylinder];
            "Redis" [shape=cylinder];
            "Qdrant" [shape=cylinder];
            "File Storage" [shape=folder];
        }
    }
    
    // Embedding Layer
    subgraph cluster_embeddings {
        label="Embedding Models";
        style=filled;
        fillcolor="#ffefd5";
        
        "embedding_interface.py" [label="Embedding Interface\n- LocalEmbedder\n- OpenAIEmbedder"];
        "embedding_factory.py" [label="Embedding Factory"];
        "pipeline_schemas.py" [label="Pipeline Schemas\n- Validation"];
    }
    
    // Connections - API to Services
    "main.py" -> "auth.py";
    "main.py" -> "case_management_routes.py";
    "main.py" -> "monitoring_routes.py";
    "main.py" -> "refactored_agent_sdk.py";
    
    // Routes to Services
    "auth.py" -> "database_manager.py";
    "case_management_routes.py" -> "case_management_service.py";
    "monitoring_routes.py" -> "monitoring.py";
    
    // Agent to Services
    "refactored_agent_sdk.py" -> "tool_registry.py";
    "refactored_agent_sdk.py" -> "tool_executor.py";
    "refactored_agent_sdk.py" -> "conversation_manager.py";
    
    // Service Dependencies
    "case_management_service.py" -> "database_manager.py";
    "document_generation_service.py" -> "statute_search_service.py";
    "document_generation_service.py" -> "supreme_court_service.py";
    "document_generation_service.py" -> "openai_client.py";
    "statute_search_service.py" -> "llm_manager.py";
    "supreme_court_service.py" -> "database_manager.py";
    
    // Core Dependencies
    "database_manager.py" -> "PostgreSQL";
    "llm_manager.py" -> "embedding_interface.py";
    "service_registry.py" -> "config_service.py";
    "service_registry.py" -> "database_manager.py";
    "service_registry.py" -> "llm_manager.py";
    
    // Worker Task Dependencies
    "celery_app.py" -> "Redis";
    "case_tasks.py" -> "service_registry.py";
    "document_tasks.py" -> "service_registry.py";
    "search_tasks.py" -> "service_registry.py";
    "embedding_tasks.py" -> "service_registry.py";
    "statute_tasks.py" -> "service_registry.py";
    "ruling_tasks.py" -> "service_registry.py";
    "maintenance.py" -> "service_registry.py";
    
    // Data Flow
    "statute_search_service.py" -> "Qdrant";
    "supreme_court_service.py" -> "Qdrant";
    "embedding_interface.py" -> "Qdrant";
    "monitoring.py" -> "Redis";
    
    // Task Flow
    edge [style=dashed, color=blue];
    "document_tasks.py" -> "Document Generation Queue" [label="async"];
    "search_tasks.py" -> "Search Queue" [label="async"];
    "embedding_tasks.py" -> "Embeddings Queue" [label="async"];
    "case_tasks.py" -> "Case Management Queue" [label="async"];
    
    // Queue definitions (invisible nodes for layout)
    "Document Generation Queue" [shape=none, label=""];
    "Search Queue" [shape=none, label=""];
    "Embeddings Queue" [shape=none, label=""];
    "Case Management Queue" [shape=none, label=""];
}
